version: '3'

services:
  nginx:
    image: nginx:stable-alpine
    volumes:
      - ./nginx/templates:/etc/nginx/templates
    ports:
      - "80:80"
    command: [ nginx-debug, '-g', 'daemon off;' ]
  app:
    image: orendat/go:latest
    user: "1000:1000"
    environment:
      - GOCACHE=/usr/src/app/tmp/cache
    ports:
      - "2345:2345"
    volumes:
      - ./WS-APP:/usr/src/app
      - /etc/passwd:/etc/passwd
      - /etc/shadow:/etc/shadow
      - ~/go/pkg:/go/pkg # для синхронизиации пакетов с IDE
    command: [ "air" ]
  db:
    image: postgres:alpine
    restart: unless-stopped
    command: [ "postgres", "-c", "log_statement=all", "-c", "log_destination=stderr" ]
    env_file:
      - ./WS-AUTH/.env
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./WS-AUTH/docker/pg/data:/var/lib/postgresql/data
    ports:
      - ${DB_PORT:-5432}:5432
  auth:
    image: golang:1.19-alpine
    restart: unless-stopped
    depends_on:
      - db
    volumes:
      - ./WS-AUTH:/auth
      - ~/go/pkg:/go/pkg
    working_dir: /auth
    command: sh -c "go build -o /tmp/auth ./cmd && /tmp/auth"
    env_file:
      - ./WS-AUTH/.env